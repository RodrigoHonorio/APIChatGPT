package co.uk.APIChatGPT.openAI;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

/**
 * Represents a utility class to interact with OpenAI's ChatGPT API.
 * Provides methods to ask questions and receive responses using specified personality.
 */
public class ChatGPTPersonality {

    /**
     * Makes a request to ChatGPT with the given question and predefined personality.
     *
     * @param question The question to ask ChatGPT
     * @return The response generated by ChatGPT
     * @throws IOException          If there is an error connecting to the API
     * @throws InterruptedException If the operation is interrupted
     */
    public String toAsk(String question) throws IOException, InterruptedException {
        JsonObject requestBody = buildRequestBody(question, ChatGPTData.PERSONALITY);
        HttpRequest request = buildHttpRequest(requestBody);

        HttpResponse<String> response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());

        if (response.statusCode() == 200) {
            return processResponse(response.body());
        } else {
            throw new IOException("Error connecting to ChatGPT: " + response.statusCode() + " " + response.body());
        }
    }

    /**
     * Builds the JSON request body to send to the ChatGPT API.
     *
     * @param question    The question to ask ChatGPT
     * @param personality The personality to apply to the response
     * @return The JSON object representing the request body
     */
    private JsonObject buildRequestBody(String question, String personality) {
        JsonObject requestBody = new JsonObject();
        requestBody.addProperty("model", ChatGPTData.MODEL);

        JsonArray messages = new JsonArray();

        // Adds system message to define the personality
        JsonObject systemMessage = new JsonObject();
        systemMessage.addProperty("role", "system");
        systemMessage.addProperty("content", personality);
        messages.add(systemMessage);

        // Adds user message
        JsonObject userMessage = new JsonObject();
        userMessage.addProperty("role", "user");
        userMessage.addProperty("content", question);
        messages.add(userMessage);

        requestBody.add("messages", messages);

        requestBody.addProperty("temperature", ChatGPTData.TEMPERATURE);
        requestBody.addProperty("max_tokens", ChatGPTData.MAX_TOKENS);

        return requestBody;
    }

    /**
     * Constructs the HTTP request to send the JSON request body to the ChatGPT API.
     *
     * @param requestBody The JSON object representing the request body
     * @return The constructed HTTP request
     */
    private HttpRequest buildHttpRequest(JsonObject requestBody) {
        return HttpRequest.newBuilder()
                .uri(URI.create(ChatGPTData.BASE_URL))
                .header("Content-Type", "application/json")
                .header("Authorization", "Bearer " + ChatGPTData.API_KEY)
                .POST(HttpRequest.BodyPublishers.ofString(requestBody.toString()))
                .build();
    }

    /**
     * Processes the JSON response from the ChatGPT API to extract the generated response.
     *
     * @param responseBody The JSON response body from the API
     * @return The generated response from ChatGPT
     */
    private String processResponse(String responseBody) {
        JsonObject responseJson = new Gson().fromJson(responseBody, JsonObject.class);
        return responseJson.getAsJsonArray("choices").get(0).getAsJsonObject().get("message").getAsJsonObject().get("content").getAsString();
    }
}
